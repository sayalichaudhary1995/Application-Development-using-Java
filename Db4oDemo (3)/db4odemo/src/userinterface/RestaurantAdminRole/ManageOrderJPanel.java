/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.RestaurantAdminRole;

import Business.EcoSystem;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.OrderWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.Date;
import java.util.Objects;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sayu
 */
public class ManageOrderJPanel extends javax.swing.JPanel {
 private JPanel userProcessContainer;
    private UserAccount userAcc;
    private EcoSystem system;

    /**
     * Creates new form ManageOrderJPanel
     */
     public ManageOrderJPanel(JPanel userProcessContainer, UserAccount userAcc, EcoSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAcc = userAcc;
        this.system = system;
        populateTable();
    }
public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) orderJTable.getModel();

        model.setRowCount(0);

        for (WorkRequest request : system.getWorkQueue().getWorkRequestList()) {
            if (request.getRestaurantName().equals(userAcc.getEmployee().getName())) {
                Object[] row = new Object[5];
                row[0] = request.getRestaurantName();
                row[1] = request.getRequestDate();
                row[2] = request.getOrderAmount();
                row[3] = request.getSender().getEmployee().getName();
                row[4] = request.getStatus();

                model.addRow(row);
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        viewOrderDetailsJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderJTable = new javax.swing.JTable();

        viewOrderDetailsJButton.setText("View Order Details");
        viewOrderDetailsJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewOrderDetailsJButtonActionPerformed(evt);
            }
        });

        backJButton.setText("<<Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        orderJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Restaurant Name", "Order Date", "Order Amount", "Sender", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(orderJTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 706, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backJButton)
                        .addGap(201, 201, 201)
                        .addComponent(viewOrderDetailsJButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewOrderDetailsJButton)
                    .addComponent(backJButton))
                .addContainerGap(127, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void viewOrderDetailsJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewOrderDetailsJButtonActionPerformed
        int selectedRow = orderJTable.getSelectedRow();
        if (selectedRow >= 0) {
            OrderWorkRequest order = new OrderWorkRequest();
            String restaurant = (String) orderJTable.getValueAt(selectedRow, 0);
            Date datePlaced = (Date) orderJTable.getValueAt(selectedRow, 1);
            Double orderAmt = (Double) orderJTable.getValueAt(selectedRow, 2);
            UserAccount sender = new UserAccount();
            String userAccountName = (String) orderJTable.getValueAt(selectedRow, 3);
            for (UserAccount userAccount : system.getUserAccountDirectory().getUserAccountList()) {
                if (userAccount.getEmployee().getName().equals(userAccountName)) {
                    sender = userAccount;
                }
            }
            for (WorkRequest request : system.getWorkQueue().getWorkRequestList()) {
                if ((request.getSender().equals(sender)) && (request.getRequestDate().equals(datePlaced)) && (request.getRestaurantName().equals(restaurant)) && (Objects.equals(request.getOrderAmount(), orderAmt))) {
                    order = (OrderWorkRequest) request;
                }
            }
            AssignDeliveryManJPanel assignDeliveryManJPanel = new AssignDeliveryManJPanel(userProcessContainer, system, order);
            userProcessContainer.add("assignDeliveryManJPanel", assignDeliveryManJPanel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        } else {
            JOptionPane.showMessageDialog(null, "Please select a Row!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_viewOrderDetailsJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable orderJTable;
    private javax.swing.JButton viewOrderDetailsJButton;
    // End of variables declaration//GEN-END:variables
}
