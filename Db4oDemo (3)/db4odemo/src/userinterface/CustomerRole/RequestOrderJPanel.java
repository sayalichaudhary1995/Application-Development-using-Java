/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.CustomerRole;

import Business.EcoSystem;
import Business.Organization;
import Business.Restaurant.Restaurant;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.OrderWorkRequest;
import Business.WorkQueue.WorkQueue;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author raunak
 */
public class RequestOrderJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private EcoSystem system;
    private Restaurant restaurant;
    private Double total = 0.0;
    OrderWorkRequest request = new OrderWorkRequest();
    HashMap<String, Integer> orderItem = new HashMap<>();

    /**
     * Creates new form RequestLabTestJPanel
     */
    public RequestOrderJPanel(JPanel userProcessContainer, UserAccount account, EcoSystem system, Restaurant restaurant) {
        initComponents();

        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.system = system;
        this.restaurant = restaurant;

        valueLabel.setText(restaurant.getName());
        populateNameJComboBox();
    }
public void populateNameJComboBox() {
        nameJComboBox.removeAllItems();
        for (Map.Entry mapElement : restaurant.getMenu().entrySet()) {
            nameJComboBox.addItem(mapElement.getKey());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        messageJTextField = new javax.swing.JTextField();
        valueLabel = new javax.swing.JLabel();
        enterpriseLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        nameJComboBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        quantityJTextField = new javax.swing.JTextField();
        priceJLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        totalJLabel = new javax.swing.JLabel();
        addToCartJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        confirmJButton = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Message");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 40, -1, -1));
        add(messageJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 40, 89, -1));

        valueLabel.setText("<value>");
        add(valueLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 10, 130, -1));

        enterpriseLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        enterpriseLabel.setText("Reuest Order");
        add(enterpriseLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 120, 30));

        jLabel4.setText("Price:");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 100, 50, 20));

        jLabel2.setText("Name:");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 70, 50, 20));

        nameJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        nameJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameJComboBoxActionPerformed(evt);
            }
        });
        add(nameJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 70, 120, -1));

        jLabel3.setText("Quantity:");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 130, 50, 20));
        add(quantityJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 130, 89, -1));

        priceJLabel.setText("0.0");
        add(priceJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 100, 90, 20));

        jLabel5.setText("Total Amount:");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 170, 80, 20));

        totalJLabel.setText("0.0");
        add(totalJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 170, 90, 20));

        addToCartJButton.setText("Add to Cart");
        addToCartJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToCartJButtonActionPerformed(evt);
            }
        });
        add(addToCartJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 210, -1, -1));

        backJButton.setText("<<Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 260, -1, -1));

        confirmJButton.setText("Confirm & Place Order");
        confirmJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmJButtonActionPerformed(evt);
            }
        });
        add(confirmJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 260, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void nameJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameJComboBoxActionPerformed
        String name = (String) nameJComboBox.getSelectedItem();
        if (name != null) {
            priceJLabel.setText(String.valueOf(restaurant.getMenu().get(name)));
        }
    }//GEN-LAST:event_nameJComboBoxActionPerformed

    private void addToCartJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToCartJButtonActionPerformed
        if (quantityJTextField.getText().isEmpty() || quantityJTextField.getText() == null) {
            JOptionPane.showMessageDialog(null, "Please enter quantity !");
            return;
        } else if(!quantityJTextField.getText().matches("[1-9]+")){
            JOptionPane.showMessageDialog(null, "Only numbers are allowed !");
            return;
        }else {
            int qty = Integer.parseInt(quantityJTextField.getText());
            String item = (String) nameJComboBox.getSelectedItem();
            Double pricePerItem = qty * (restaurant.getMenu().get(item));
            orderItem.put(item, qty);
            total = total + pricePerItem;
            totalJLabel.setText(String.valueOf(total));

            quantityJTextField.setText("");
        }
    }//GEN-LAST:event_addToCartJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        OrderAreaJPanel dwjp = (OrderAreaJPanel) component;
        dwjp.populateRestaurantJComboBox();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void confirmJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmJButtonActionPerformed
        request.setRestaurantName(restaurant.getName());
        request.setOrderItem(orderItem);
        request.setOrderAmount(Double.parseDouble(totalJLabel.getText()));
        request.setSender(userAccount);
        request.setStatus("Ordered");

        if (system.getWorkQueue() == null) {
            WorkQueue workQueue = new WorkQueue();
            system.setWorkQueue(workQueue);
        }
        system.getWorkQueue().addWorkRequest(request);
        JOptionPane.showMessageDialog(null, "Order placed succesfully!");
    }//GEN-LAST:event_confirmJButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToCartJButton;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton confirmJButton;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField messageJTextField;
    private javax.swing.JComboBox nameJComboBox;
    private javax.swing.JLabel priceJLabel;
    private javax.swing.JTextField quantityJTextField;
    private javax.swing.JLabel totalJLabel;
    private javax.swing.JLabel valueLabel;
    // End of variables declaration//GEN-END:variables
}
